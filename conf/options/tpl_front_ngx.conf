server {
    listen 8360 ;
    server_name ${DOMAIN};

    set $php_sock 'unix:/var/run/rgapp-${USER}-${PRJ_KEY}-${APP_SYS}/fpm.sock';


    location / {
        include        fastcgi_params;
        root           ${PRJ_ROOT}/src/apps/${APP_SYS};
        fastcgi_pass   $php_sock;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  ${PRJ_ROOT}/src/apps/${APP_SYS}/index.php ;

        fastcgi_connect_timeout 300s;
        fastcgi_send_timeout 300s;
        fastcgi_read_timeout 300s;
    }

    location = / {
    }

    location = /uuid/luazero {
        content_by_lua '
            local json      = require "json"
            local res = {errno = 256, errmsg = "unknow error."}

            res.errno = 0
            res.errmsg = ""
            res.data = "0"
            ngx.print(json.encode(res))
        ';
    }

    location = /uuid/get {

        set $biz_id $arg_biz;
        set_if_empty $biz_id 0;

        default_type text/html;
        expires off;

        content_by_lua '
            local memcached = require "resty.memcached"
            local json      = require "json"
            local memc, err = memcached:new()

            local ip, port = "127.0.0.1", 5001

            local res = {errno = 256, errmsg = "unknow error."}

            if not memc then
                ngx.print("failed to instantiate memc: ", err)
                return
            end

            memc:set_timeout(500) -- 0.5 sec

            -- or connect to a unix domain socket file listened by a memcached server:
            -- local ok, err = memc:connect("unix:/path/to/memc.sock")

            local ok, err = memc:connect(ip, port)
            if not ok then
                ngx.log(ngx.ERR, "uuid failed to connect backend: ", err)
                res.errno = 1
                res.errmsg = err
                ngx.print(json.encode(res))
                return
            end


            local id_key = ngx.var.biz_id .. "id" .. ngx.time();

            local uuid, flags, err = memc:get(id_key)
            if err then
                ngx.log(ngx.ERR, "uuid failed to get: ", err)
                res.errno = 2
                res.errmsg = err
                ngx.print(json.encode(res))
                return
            end

            res.errno = 0
            res.errmsg = ""
            res.data = uuid
            --tonumber(uuid)
            ngx.print(json.encode(res))
        ';
    }

}
